# Step 1: Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
import warnings
warnings.filterwarnings("ignore")

# Step 2: Load the Data
df = pd.read_csv("porter_data_1.csv")

# Step 3: Convert datetime columns
df["created_at"] = pd.to_datetime(df["created_at"])
df["actual_delivery_time"] = pd.to_datetime(df["actual_delivery_time"])

# Step 4: Feature Engineering
df["time_taken"] = (df["actual_delivery_time"] - df["created_at"]).dt.total_seconds() / 60
df["hour"] = df["created_at"].dt.hour
df["day_of_week"] = df["created_at"].dt.dayofweek
df["is_weekend"] = df["day_of_week"].isin([5, 6]).astype(int)

# Step 5: Drop Unnecessary Columns
df = df.drop(columns=["created_at", "actual_delivery_time", "store_primary_category"])

# Step 6: Drop rows with missing values
df = df.dropna()

# Step 7: Define Features and Target
X = df.drop("time_taken", axis=1)
y = df["time_taken"]

# Step 8: Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 9: Scaling Numerical Features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 10: Train Linear Regression Model
lr = LinearRegression()
lr.fit(X_train_scaled, y_train)

# Step 11: Predict and Evaluate
y_pred = lr.predict(X_test_scaled)

rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"RÂ² Score: {r2:.2f}")

# Step 12: Coefficients for Feature Importance
feature_importance = pd.DataFrame({
    'Feature': X.columns,
    'Coefficient': lr.coef_
}).sort_values(by='Coefficient', key=abs, ascending=False)

print("\nTop Important Features:")
print(feature_importance)
